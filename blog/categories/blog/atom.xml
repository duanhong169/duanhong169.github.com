<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog | 弘's blog]]></title>
  <link href="http://duanhong169.github.com/blog/categories/blog/atom.xml" rel="self"/>
  <link href="http://duanhong169.github.com/"/>
  <updated>2012-06-13T16:43:17+08:00</updated>
  <id>http://duanhong169.github.com/</id>
  <author>
    <name><![CDATA[弘哥保护你]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NOSQL & REST]]></title>
    <link href="http://duanhong169.github.com/blog/nosql-rest.html"/>
    <updated>2012-06-12T13:50:00+08:00</updated>
    <id>http://duanhong169.github.com/blog/nosql-rest</id>
    <content type="html"><![CDATA[<p>今天听了<a href="http://www.martinfowler.com">Martin Fowler</a>的演讲，虽然讲的内容并不多，但是讲的都是当今软件开发中最重要的技术和原则，这些都是这个时代的程序员所应该熟知的，在此简单地做一个总结。</p>

<h2>1. NoSQL Models</h2>

<p>由于目前的应用数据存储对分布式、可扩展性方面的需求，NoSQL作为新一代的数据库组织方式逐渐被人们放上台面，所谓<a href="http://nosql-database.org/">NoSQL</a>，并不应该被简单的理解为"No" SQL，而更应该被理解为“Not only SQL”，它通常具有非关系型、分布式、开源和水平可扩展等几个特性。</p>

<p>与关系数据库通常遵循的是ACID(atomicity<em>原子性, consistency</em>一致性, isolation<em>隔离性, durability</em>持久性)不同，NoSQL所遵循的是BASE(Basically Available<em>基本可用, Soft state</em>软状态, Eventually consistent_最终一致性)，这些特性正是与当前分布式存储、云计算领域的需求相符合的。具体的不同可以参照<a href="http://it.toolbox.com/blogs/oracle-guide/acid-vs-base-25938">这篇文章</a>。</p>

<h2>2. REST</h2>

<p>REST即Representational State Transfer，通常被译为“表述性状态转移”，这是一个用于分布式系统的软件体系结构，最大的一个应用当属我们的万维网（World Wide Web）了，REST在最近几年已经逐步成为了Web service的主要设计模式，通常我们说一个Web Service的API是RESTful的，实际上就是指它具备了REST的特性，以Web为例，REST具有如下一些特性：</p>

<ol>
<li>网络上所有的事物都被抽象为资源（resource）；</li>
<li>每个资源对应一个唯一的资源标识（resource identifier）；</li>
<li>可以通过通用的连接器接口对资源进行操作（generic connector interface）；</li>
<li>对资源的各种操作不会改变资源标识；</li>
<li>所有的操作都是无状态的（stateless）</li>
</ol>


<p>按Martin所述，按照<a href="http://martinfowler.com/articles/richardsonMaturityModel.html">Richardson Maturity Model</a>，REST按程度不同通常如下四个阶段：</p>

<p>图1. <a href="http://martinfowler.com/articles/images/richardsonMaturityModel/overview.png">Steps toward REST</a></p>

<p><img src="/images/rest-overview.png" alt="rest-overview" /></p>

<!--more-->


<ol>
<li><p>Level 0：
最初级的阶段，将HTTP当作一个可以进行远程交互的通讯系统来使用，在这个阶段不会使用到web的任何机制，而仅仅将HTTP作为远程交互机制。
以一个示例来简单地说明：如果我们需要通过web预约一位医生，通常会经历如下步骤：</p>

<ol>
<li><p><code>POST /appointmentService?data=2010-01-04&amp;doctor=mjones</code></p>

<p>获取到在2010年1月4号MJones医生的所有可预约时间段，我们会得到服务器响应传回的一个列表</p></li>
<li><p><code>POST /appointmentService?data=2010-01-04&amp;doctor=mjones&amp;start=1400&amp;end=1450</code></p>

<p>请求预约2010年1月4号MJones医生从14点到14点50这个时间段，服务器会根据预约是否成功返回响应</p></li>
</ol>
</li>
<li><p>Level 1 - Resources：</p>

<p>在这个阶段，API的设计开始以Resource（资源）为中心，现在将不通过参数的形式向appointmentService提供数据，而是将医生、医生的可预约时间段都视为资源，这时预约医生将变为如下形式：</p>

<ol>
<li><code>POST /doctors/mjones</code>  将返回MJones可预约时间列表</li>
<li><code>POST /slots/1234</code>      预约编号为1234的时间段，这个id已经对应了一个唯一的医生->时间段资源</li>
</ol>


<p>可以感受到，现在的调用方式已经具备了“对象”的感觉。</p></li>
<li><p>Level 2 - HTTP Verbs：</p>

<p>这个阶段开始使用不同的HTTP Verb来对资源进行不同的操作，HTTP Verbs包括<code>GET/POST/PUT/DELETE/HEAD/TRACE/CONNECT</code>等，其中最常用的是<code>GET/POST/PUT/DELETE</code>，它们可以被理解为数据库的<code>READ/CREATE/UPDATE/DELETE</code>操作（但是Martin在文中指出这样的类比是不正确的）。这时候，可以通过：</p>

<p><code>GET /doctors/mjones/slots?date=20100104&amp;status=open</code></p>

<p>的形式来获取列表，需要注意的是，使用GET方法来请求数据在Level 2中是关键，因为HTTP将<code>GET</code>方法定义为safe operation（安全操作），即<code>GET</code>操作不会对任何资源的状态造成影响，可以说<code>GET</code>操作是幂等的，因此也是安全的，无论我们执行多少次<code>GET</code>方法，我们得到的结果总是一致的，这个特性也使得我们可以更大的发挥caching的作用来提高对HTTP请求响应的效率，HTTP包括了许多的方式来支持caching，遵循这些规则我们能够更好的利用HTTP的性能。如果要预约医生，就需要使用能够改变资源状态的操作，<code>POST</code>或者<code>PUT</code>都能够改变资源的状态，可以通过Level 1中相同的方式：</p>

<p><code>POST /slots/1234</code></p>

<p>来完成对医生的预约。
另外，在Level 2中使用了HTTP response code来表示对资源操作的结果，例如<code>201(Created)</code>、<code>409(Conflict)</code>。</p></li>
<li><p>Level 3 - Hypermedia Controls</p>

<p>这是REST的最终阶段，通常被描述为<code>HATEOAS</code>（Hypertext As The Engine Of Application State），它的意思是，在我们取得了可预约的slots列表之后，能够从响应中知道应该如何进行下一步操作（预约）。通常的RESTful API的每个操作都是独立的对于某个Resource所进行的，如果需要知道在获取了slots列表之后如何进行预约操作通常需要借助于API文档。而Hypermedia Control所要做的就是在服务器的响应中，将会包含进行下一步操作所需要的信息。</p></li>
</ol>


<p>继续前面的示例，在这种情况下，预约一位医生的操作所涉及的内容如下：</p>

<ul>
<li><p>通过<code>GET /doctors/mjones/slots?date=20100104&amp;status=open</code>可以获取到服务器响应类似如下内容：</p>

<p>  <div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>HTTP response response.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>[various headers]<span class="nt">&lt;/p&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;openSlotList&gt;</span>
</span><span class='line'>  <span class="nt">&lt;slot</span> <span class="na">id =</span> <span class="s">&quot;1234&quot;</span> <span class="na">doctor =</span> <span class="s">&quot;mjones&quot;</span> <span class="na">start =</span> <span class="s">&quot;1400&quot;</span> <span class="na">end =</span> <span class="s">&quot;1450&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span> <span class="ni">&amp;lt;</span>link rel = &quot;/linkrels/slot/book&quot;
</span><span class='line'>       uri = &quot;/slots/1234&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/slot&gt;</span>
</span><span class='line'>  <span class="nt">&lt;slot</span> <span class="na">id =</span> <span class="s">&quot;5678&quot;</span> <span class="na">doctor =</span> <span class="s">&quot;mjones&quot;</span> <span class="na">start =</span> <span class="s">&quot;1600&quot;</span> <span class="na">end =</span> <span class="s">&quot;1650&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span> <span class="ni">&amp;lt;</span>link rel = &quot;/linkrels/slot/book&quot;
</span><span class='line'>       uri = &quot;/slots/5678&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/slot&gt;</span>
</span><span class='line'><span class="nt">&lt;/openSlotList&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<ul>
<li><p>如上第6、7、10、11行的link标签内的信息就是新增的用于表达如何进行预约操作的信息。它告诉我们可以通过/slots/1234这样的url来进行预定操作，于是，通过<code>POST /slots/1234</code>可以进行预约，服务器将会发回如下信息：</p>

<p>  <div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>HTTP response response.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Location: http://royalhope.nhs.uk/slots/1234/appointment
</span><span class='line'>[various headers]<span class="nt">&lt;/p&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;appointment&gt;</span>
</span><span class='line'>  <span class="nt">&lt;slot</span> <span class="na">id =</span> <span class="s">&quot;1234&quot;</span> <span class="na">doctor =</span> <span class="s">&quot;mjones&quot;</span> <span class="na">start =</span> <span class="s">&quot;1400&quot;</span> <span class="na">end =</span> <span class="s">&quot;1450&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;patient</span> <span class="na">id =</span> <span class="s">&quot;jsmith&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>link rel = &quot;/linkrels/appointment/cancel&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>    uri = &quot;/slots/1234/appointment&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="ni">&amp;lt;</span>link rel = &quot;/linkrels/appointment/addTest&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>    uri = &quot;/slots/1234/appointment/tests&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="ni">&amp;lt;</span>link rel = &quot;self&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>    uri = &quot;/slots/1234/appointment&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="ni">&amp;lt;</span>link rel = &quot;/linkrels/appointment/changeTime&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>    uri = &quot;/doctors/mjones/slots?date=20100104@status=open&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="ni">&amp;lt;</span>link rel = &quot;/linkrels/appointment/updateContactInfo&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>    uri = &quot;/patients/jsmith/contactInfo&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="ni">&amp;lt;</span>link rel = &quot;/linkrels/help&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>    uri = &quot;/help/appointment&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/appointment&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>Hypermedia controls的优势在于，服务器可以在不破坏客户端应用程序的情况下对自己的URI schema进行改变。如上例所示，客户端只需要去查阅addTest连接即可，服务端可以随意地对除了最初入口点(slots/1234)之外的所有URI进行改变。</p>

<h2>3. More</h2>

<p>Martin还讲到了DSL在软件设计的价值、Event Sourcing等等，下次再接着总结。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdowns]]></title>
    <link href="http://duanhong169.github.com/blog/markdown.html"/>
    <updated>2012-04-24T11:21:00+08:00</updated>
    <id>http://duanhong169.github.com/blog/markdown</id>
    <content type="html"><![CDATA[<p>来自John Gruber 的<a href="http://daringfireball.net/projects/markdown/basics">Markdown Basics</a>。</p>

<h1>标题1</h1>

<h2>标题2</h2>

<p>普通段落</p>

<h3>标题3</h3>

<blockquote><p>引用段落</p>

<p>引用段落</p>

<p>引用段落</p>

<h2>引用段落内的标题</h2></blockquote>

<!--more-->


<h2>强调</h2>

<p>强调后面的字符<em>被强调</em>。
强调后面的字符<em>被强调</em>。</p>

<p>重点强调后面的字符<strong>被强调</strong>。
重点强调后面的字符<strong>被强调</strong>。</p>

<h2>列表</h2>

<p>无序列表：</p>

<ul>
<li>项目一</li>
<li>项目二</li>
<li>项目三</li>
<li>项目一</li>
<li>项目二</li>
<li>项目三</li>
<li>项目一</li>
<li>项目二</li>
<li>项目三</li>
</ul>


<p>有序列表：</p>

<ol>
<li>项目一</li>
<li>项目二</li>
<li>项目三</li>
</ol>


<p>列表项是段落：</p>

<ul>
<li><p>段落一</p>

<p>更多段落</p></li>
<li><p>段落二</p></li>
</ul>


<h2>链接</h2>

<p>这是一个<a href="http://blog.segmac.com">链接</a>。</p>

<p>这是一个带标题的<a href="http://blog.segmac.com" title="弘's blog">链接</a>。</p>

<p>引用方式的链接：</p>

<p>这里分别是<a href="http://google.com/" title="Google">链接一</a>和<a href="http://search.yahoo.com/" title="Yahoo Search">链接二</a>，当然还可以有更多<a href="http://search.msn.com/" title="MSN Search">链接</a>。</p>

<p>链接名是<a href="http://www.nytimes.com/">大小写</a>不敏感的。</p>

<h2>图片</h2>

<p>插入一张图片：</p>

<p><img src="http://1.gravatar.com/avatar/73687769fd7989d35ea4f9800df386e0?size=420" alt="图片" />。</p>

<p>或者以引用形式插入：</p>

<p><img src="http://1.gravatar.com/avatar/73687769fd7989d35ea4f9800df386e0?size=420" title="这是图片而已" alt="图片" /></p>

<h2>代码</h2>

<p>插入一段代码<code>Here are codes</code>。</p>

<p>If you want your page to validate under XHTML 1.0 Strict,
you've got to put paragraph tags in your blockquotes:</p>

<pre><code>&lt;blockquote&gt;
    &lt;p&gt;For example.&lt;/p&gt;
&lt;/blockquote&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 分割线]]></title>
    <link href="http://duanhong169.github.com/blog/taste.html"/>
    <updated>2012-04-20T02:59:00+08:00</updated>
    <id>http://duanhong169.github.com/blog/taste</id>
    <content type="html"><![CDATA[<p>终于可以代码高亮了，无语了。不过还是很丑的样子。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Hello Octopress.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">hello</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;&quot;Hello Octopress&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
